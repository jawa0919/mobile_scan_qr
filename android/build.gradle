group 'com.example.mobile_scan_qr'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.8.22'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.yaml:snakeyaml:1.17'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.example.mobile_scan_qr'
    }

    compileSdkVersion 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 21
    }

    dependencies {
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        def yamlMap = new org.yaml.snakeyaml.Yaml().load(new File(rootProject.projectDir.parentFile, 'pubspec.yaml').text)
        def useUnbundled = yamlMap.mobile_scanner?.android?.useUnbundled ?: false

        if (useUnbundled.toBoolean()) {
            // Dynamically downloaded model via Google Play Services
            implementation 'com.google.android.gms:play-services-mlkit-barcode-scanning:18.3.0'
        } else {
            // Bundled model in app
            implementation 'com.google.mlkit:barcode-scanning:17.2.0'
        }
//        implementation 'com.google.android.gms:play-services-mlkit-barcode-scanning:18.3.0'
//        implementation 'com.google.mlkit:barcode-scanning:17.2.0'

        implementation 'androidx.camera:camera-camera2:1.3.1'
        implementation 'androidx.camera:camera-lifecycle:1.3.1'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
